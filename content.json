[{"title":"test-hexo-synax-again","date":"2018-06-26T15:30:00.000Z","path":"2018/06/26/test-hexo-synax-again/","text":"hexo语法测试 预定义参数测试","tags":[{"name":"hexo","slug":"hexo","permalink":"https://betgar.github.io/tags/hexo/"}]},{"title":"Android 开发环境部署","date":"2018-06-25T02:00:00.000Z","path":"2018/06/25/android-dev-env/","text":"Android 开发环境部署 android studio 3.0 android SDK Java环境配置 Java SDK安装：JDK8.X Java环境变量配置 我的电脑配置环境变量： JAVA_HOME D:\\Android\\jdk1.6.0_03 CLASSPATH %JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar; 3-PATH %JAVA_HOME%\\bin; Android Studio安装 android studio 解压就可以用. Android SDK manager 更新SDK 第一次启动android studio，有让你选择的android SDK的路径，然后勾选一些选项然后进行更新。 也可以跳过，然后启动android studio之后，进入configure搜索sdk进行更新（目前好像不存在科学上网的问题了）。 Android studio 常用插件 Butterknife Zelezny Parcelable Code Generator Prettify ADB Idea GsonFormat Android Drawable Importer Android Code Generator Android Material Design Icon Generator 参考：https://www.cnblogs.com/zhayh/p/6555850.html ADB环境变量 ADB环境变量配置，方便调试使用adb命令。 环境变量里面配置： ANDROID_HOME=你的anroid sdk路径 path=%ANDROID_HOME%\\platform-tools;%ANDROID_HOME%\\tools; 参考： https://www.cnblogs.com/yxysuanfa/p/7251253.html","tags":[{"name":"android","slug":"android","permalink":"https://betgar.github.io/tags/android/"}]},{"title":"apt-cyg安装","date":"2018-06-04T00:29:00.000Z","path":"2018/06/04/apt-cyg/","text":"apt-cyg 因为使用在windows下使用cygwin，为了方便安装其它包，所以需要安装apt-cyg包管理器。 使用setup-x86_64.exe安装 setup-x86_64.exe已经是cygwin的包管理器，所以其它包都可以通过它来安装。 1234# 方便使用alias cyg-get=\"/cygdrive/d/path/to/cygwin/setup-x86_64.exe -q -P\"# 建议使用ftp://sourceware.org/pub/cygwin镜像比较快cyg-get wget 安装wget 使用apt-cyg需要先安装wget 下载apt-cyg 下载apt-cyg保存到$root\\cygwin64\\bin 地址：https://raw.githubusercontent.com/transcode-open/apt-cyg/master/apt-cyg 设置镜像1234# 添加权限chmod +x /bin/apt-cyg# 设置官方镜像apt-cyg mirror ftp://sourceware.org/pub/cygwin apt-cyg源码bin/bash# apt-cyg: install tool for Cygwin similar to debian apt-get## The MIT License (MIT)## Copyright (c) 2013 Trans-code Design## Permission is hereby granted, free of charge, to any person obtaining a copy# of this software and associated documentation files (the \"Software\"), to deal# in the Software without restriction, including without limitation the rights# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell# copies of the Software, and to permit persons to whom the Software is# furnished to do so, subject to the following conditions:## The above copyright notice and this permission notice shall be included in# all copies or substantial portions of the Software.## THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN# THE SOFTWARE.if [ $&#123;BASH_VERSINFO&#125;$&#123;BASH_VERSINFO[1]&#125; -lt 42 ]then echo 'Bash version 4.2+ required' exitfiusage=\"\\NAME apt-cyg - package manager utilitySYNOPSIS apt-cyg [operation] [options] [targets]DESCRIPTION apt-cyg is a package management utility that tracks installed packages on a Cygwin system. Invoking apt-cyg involves specifying an operation with any potential options and targets to operate on. A target is usually a package name, file name, URL, or a search string. Targets can be provided as command line arguments.OPERATIONS install Install package(s). remove Remove package(s) from the system. update Download a fresh copy of the master package list (setup.ini) from the server defined in setup.rc. download Retrieve package(s) from the server, but do not install/upgrade anything. show Display information on given package(s). depends Produce a dependency tree for a package. rdepends Produce a tree of packages that depend on the named package. list Search each locally-installed package for names that match regexp. If no package names are provided in the command line, all installed packages will be queried. listall This will search each package in the master package list (setup.ini) for names that match regexp. category Display all packages that are members of a named category. listfiles List all files owned by a given package. Multiple packages can be specified on the command line. search Search for downloaded packages that own the specified file(s). The path can be relative or absolute, and one or more files can be specified. searchall Search cygwin.com to retrieve file information about packages. The provided target is considered to be a filename and searchall will return the package(s) which contain this file. mirror Set the mirror; a full URL to a location where the database, packages, and signatures for this repository can be found. If no URL is provided, display current mirror. cache Set the package cache directory. If a file is not found in cache directory, it will be downloaded. Unix and Windows forms are accepted, as well as absolute or regular paths. If no directory is provided, display current cache.OPTIONS --nodeps Specify this option to skip all dependency checks. --version Display version and exit.\"version=\"\\apt-cyg version 1The MIT License (MIT)Copyright (c) 2005-9 Stephen Jungels\"function wget &#123; if command wget -h &amp;&gt;/dev/null then command wget \"$@\" else warn wget is not installed, using lynx as fallback set \"$&#123;*: -1&#125;\" lynx -source \"$1\" &gt; \"$&#123;1##*/&#125;\" fi&#125;function find-workspace &#123; # default working directory and mirror # work wherever setup worked last, if possible cache=$(awk ' BEGIN &#123; RS = \"\\n\\\\&lt;\" FS = \"\\n\\t\" &#125; $1 == \"last-cache\" &#123; print $2 &#125; ' /etc/setup/setup.rc) mirror=$(awk ' /last-mirror/ &#123; getline print $1 &#125; ' /etc/setup/setup.rc) mirrordir=$(sed ' s / %2f g s : %3a g ' &lt;&lt;&lt; \"$mirror\") mkdir -p \"$cache/$mirrordir/$arch\" cd \"$cache/$mirrordir/$arch\" if [ -e setup.ini ] then return 0 else get-setup return 1 fi&#125;function get-setup &#123; touch setup.ini mv setup.ini setup.ini-save wget -N $mirror/$arch/setup.bz2 if [ -e setup.bz2 ] then bunzip2 setup.bz2 mv setup setup.ini echo Updated setup.ini else echo Error updating setup.ini, reverting mv setup.ini-save setup.ini fi&#125;function check-packages &#123; if [[ $pks ]] then return 0 else echo No packages found. return 1 fi&#125;function warn &#123; printf '\\e[1;31m%s\\e[m\\n' \"$*\" &gt;&amp;2&#125;function apt-update &#123; if find-workspace then get-setup fi&#125;function apt-category &#123; check-packages find-workspace for pkg in \"$&#123;pks[@]&#125;\" do awk ' $1 == \"@\" &#123; pck = $2 &#125; $1 == \"category:\" &amp;&amp; $0 ~ query &#123; print pck &#125; ' query=\"$pks\" setup.ini done&#125;function apt-list &#123; local sbq for pkg in \"$&#123;pks[@]&#125;\" do let sbq++ &amp;&amp; echo awk 'NR&gt;1 &amp;&amp; $1~pkg &amp;&amp; $0=$1' pkg=\"$pkg\" /etc/setup/installed.db done let sbq &amp;&amp; return awk 'NR&gt;1 &amp;&amp; $0=$1' /etc/setup/installed.db&#125;function apt-listall &#123; check-packages find-workspace local sbq for pkg in \"$&#123;pks[@]&#125;\" do let sbq++ &amp;&amp; echo awk '$1~pkg &amp;&amp; $0=$1' RS='\\n\\n@ ' FS='\\n' pkg=\"$pkg\" setup.ini done&#125;function apt-listfiles &#123; check-packages find-workspace local pkg sbq for pkg in \"$&#123;pks[@]&#125;\" do (( sbq++ )) &amp;&amp; echo if [ ! -e /etc/setup/\"$pkg\".lst.gz ] then download \"$pkg\" fi gzip -cd /etc/setup/\"$pkg\".lst.gz done&#125;function apt-show &#123; find-workspace check-packages for pkg in \"$&#123;pks[@]&#125;\" do (( notfirst++ )) &amp;&amp; echo awk ' $1 == query &#123; print fd++ &#125; END &#123; if (! fd) print \"Unable to locate package \" query &#125; ' RS='\\n\\n@ ' FS='\\n' query=\"$pkg\" setup.ini done&#125;function apt-depends &#123; find-workspace check-packages for pkg in \"$&#123;pks[@]&#125;\" do awk ' @include \"join\" $1 == \"@\" &#123; apg = $2 &#125; $1 == \"requires:\" &#123; for (z=2; z&lt;=NF; z++) reqs[apg][z-1] = $z &#125; END &#123; prpg(ENVIRON[\"pkg\"]) &#125; function smartmatch(small, large, values) &#123; for (each in large) values[large[each]] return small in values &#125; function prpg(fpg) &#123; if (smartmatch(fpg, spath)) return spath[length(spath)+1] = fpg print join(spath, 1, length(spath), \" &gt; \") if (isarray(reqs[fpg])) for (each in reqs[fpg]) prpg(reqs[fpg][each]) delete spath[length(spath)] &#125; ' setup.ini done&#125;function apt-rdepends &#123; find-workspace for pkg in \"$&#123;pks[@]&#125;\" do awk ' @include \"join\" $1 == \"@\" &#123; apg = $2 &#125; $1 == \"requires:\" &#123; for (z=2; z&lt;=NF; z++) reqs[$z][length(reqs[$z])+1] = apg &#125; END &#123; prpg(ENVIRON[\"pkg\"]) &#125; function smartmatch(small, large, values) &#123; for (each in large) values[large[each]] return small in values &#125; function prpg(fpg) &#123; if (smartmatch(fpg, spath)) return spath[length(spath)+1] = fpg print join(spath, 1, length(spath), \" &lt; \") if (isarray(reqs[fpg])) for (each in reqs[fpg]) prpg(reqs[fpg][each]) delete spath[length(spath)] &#125; ' setup.ini done&#125;function apt-download &#123; check-packages find-workspace local pkg sbq for pkg in \"$&#123;pks[@]&#125;\" do (( sbq++ )) &amp;&amp; echo download \"$pkg\" done&#125;function download &#123; local pkg digest digactual pkg=$1 # look for package and save desc file awk '$1 == pc' RS='\\n\\n@ ' FS='\\n' pc=$pkg setup.ini &gt; desc if [ ! -s desc ] then echo Unable to locate package $pkg exit 1 fi # download and unpack the bz2 or xz file # pick the latest version, which comes first set -- $(awk '$1 == \"install:\"' desc) if (( ! $# )) then echo 'Could not find \"install\" in package description: obsolete package?' exit 1 fi dn=$(dirname $2) bn=$(basename $2) # check the md5 digest=$4 case $&#123;#digest&#125; in 32) hash=md5sum ;; 128) hash=sha512sum ;; esac mkdir -p \"$cache/$mirrordir/$dn\" cd \"$cache/$mirrordir/$dn\" if ! test -e $bn || ! $hash -c &lt;&lt;&lt; \"$digest $bn\" then wget -O $bn $mirror/$dn/$bn $hash -c &lt;&lt;&lt; \"$digest $bn\" || exit fi tar tf $bn | gzip &gt; /etc/setup/\"$pkg\".lst.gz cd ~- mv desc \"$cache/$mirrordir/$dn\" echo $dn $bn &gt; /tmp/dwn&#125;function apt-search &#123; check-packages echo Searching downloaded packages... for pkg in \"$&#123;pks[@]&#125;\" do key=$(type -P \"$pkg\" | sed s./..) [[ $key ]] || key=$pkg for manifest in /etc/setup/*.lst.gz do if gzip -cd $manifest | grep -q \"$key\" then package=$(sed ' s,/etc/setup/,, s,.lst.gz,, ' &lt;&lt;&lt; $manifest) echo $package fi done done&#125;function apt-searchall &#123; cd /tmp for pkg in \"$&#123;pks[@]&#125;\" do printf -v qs 'text=1&amp;arch=%s&amp;grep=%s' $arch \"$pkg\" wget -O matches cygwin.com/cgi-bin2/package-grep.cgi?\"$qs\" awk ' NR == 1 &#123;next&#125; mc[$1]++ &#123;next&#125; /-debuginfo-/ &#123;next&#125; /^cygwin32-/ &#123;next&#125; &#123;print $1&#125; ' FS=-[[:digit:]] matches done&#125;function apt-install &#123; check-packages find-workspace local pkg dn bn requires wr package sbq script for pkg in \"$&#123;pks[@]&#125;\" do if grep -q \"^$pkg \" /etc/setup/installed.db then echo Package $pkg is already installed, skipping continue fi (( sbq++ )) &amp;&amp; echo echo Installing $pkg download $pkg read dn bn &lt;/tmp/dwn echo Unpacking... cd \"$cache/$mirrordir/$dn\" tar -x -C / -f $bn # update the package database awk ' ins != 1 &amp;&amp; pkg &lt; $1 &#123; print pkg, bz, 0 ins = 1 &#125; 1 END &#123; if (ins != 1) print pkg, bz, 0 &#125; ' pkg=\"$pkg\" bz=$bn /etc/setup/installed.db &gt; /tmp/awk.$$ mv /etc/setup/installed.db /etc/setup/installed.db-save mv /tmp/awk.$$ /etc/setup/installed.db [ -v nodeps ] &amp;&amp; continue # recursively install required packages requires=$(awk '$1==\"requires\", $0=$2' FS=': ' desc) cd ~- wr=0 if [[ $requires ]] then echo Package $pkg requires the following packages, installing: echo $requires for package in $requires do if grep -q \"^$package \" /etc/setup/installed.db then echo Package $package is already installed, skipping continue fi apt-cyg install --noscripts $package || (( wr++ )) done fi if (( wr )) then echo some required packages did not install, continuing fi # run all postinstall scripts [ -v noscripts ] &amp;&amp; continue find /etc/postinstall -name '*.sh' | while read script do echo Running $script $script mv $script $script.done done echo Package $pkg installed done&#125;function apt-remove &#123; check-packages cd /etc cygcheck awk bash bunzip2 grep gzip mv sed tar xz &gt; setup/essential.lst for pkg in \"$&#123;pks[@]&#125;\" do if ! grep -q \"^$pkg \" setup/installed.db then echo Package $pkg is not installed, skipping continue fi if [ ! -e setup/\"$pkg\".lst.gz ] then warn Package manifest missing, cannot remove $pkg. Exiting exit 1 fi gzip -dk setup/\"$pkg\".lst.gz awk ' NR == FNR &#123; if ($NF) ess[$NF] next &#125; $NF in ess &#123; exit 1 &#125; ' FS='[/\\\\\\\\]' setup/&#123;essential,$pkg&#125;.lst esn=$? if [ $esn = 0 ] then echo Removing $pkg if [ -e preremove/\"$pkg\".sh ] then preremove/\"$pkg\".sh rm preremove/\"$pkg\".sh fi mapfile dt &lt; setup/\"$pkg\".lst for each in $&#123;dt[*]&#125; do [ -f /$each ] &amp;&amp; rm /$each done for each in $&#123;dt[*]&#125; do [ -d /$each ] &amp;&amp; rmdir --i /$each done rm -f setup/\"$pkg\".lst.gz postinstall/\"$pkg\".sh.done awk -i inplace '$1 != ENVIRON[\"pkg\"]' setup/installed.db echo Package $pkg removed fi rm setup/\"$pkg\".lst if [ $esn = 1 ] then warn apt-cyg cannot remove package $pkg, exiting exit 1 fi done&#125;function apt-mirror &#123; if [ \"$pks\" ] then awk -i inplace ' 1 /last-mirror/ &#123; getline print \"\\t\" pks &#125; ' pks=\"$pks\" /etc/setup/setup.rc echo Mirror set to \"$pks\". else awk ' /last-mirror/ &#123; getline print $1 &#125; ' /etc/setup/setup.rc fi&#125;function apt-cache &#123; if [ \"$pks\" ] then vas=$(cygpath -aw \"$pks\") awk -i inplace ' 1 /last-cache/ &#123; getline print \"\\t\" vas &#125; ' vas=\"$&#123;vas//\\\\/\\\\\\\\&#125;\" /etc/setup/setup.rc echo Cache set to \"$vas\". else awk ' /last-cache/ &#123; getline print $1 &#125; ' /etc/setup/setup.rc fi&#125;if [ -p /dev/stdin ]then mapfile -t pksfi# process optionsuntil [ $# = 0 ]do case \"$1\" in --nodeps) nodeps=1 shift ;; --noscripts) noscripts=1 shift ;; --version) printf \"$version\" exit ;; update) command=$1 shift ;; list | cache | remove | depends | listall | download | listfiles |\\ show | mirror | search | install | category | rdepends | searchall ) if [[ $command ]] then pks+=(\"$1\") else command=$1 fi shift ;; *) pks+=(\"$1\") shift ;; esacdoneset -aif type -t apt-$command | grep -q functionthen readonly arch=$&#123;HOSTTYPE/i6/x&#125; apt-$commandelse printf \"$usage\"fi","tags":[{"name":"cygwin","slug":"cygwin","permalink":"https://betgar.github.io/tags/cygwin/"}]},{"title":"npm常用命令","date":"2018-06-04T00:00:00.000Z","path":"2018/06/04/npm-common-commands/","text":"npm常用命令 总结一下npm常用的命令。 123456789101112131415npm -vnpm install -g npm@latestnpm install -g npm@nextnpm install -g npm@versionnpm updatenpm outdatednpm uninstall lodash# 如需从 package.json 文件中删除依赖，需要在命令后添加参数 --savenpm uninstall --save lodash # package.json 文件中依赖devDependency，就是--save-dev 参数保存的# 必须通过 --save-dev 参数可以将其卸载。npm uninstall --save-dev lodash npm生命周期的命令 install: 安装依赖。 npm run install的默认值是node-gyp rebuild，前提是项目根目录下有binding.gyp文件。 build：构建项目。 npm 脚本有pre和post两个钩子。举例来说，build脚本命令的钩子就是prebuild和postbuild 。 12345678// package.json&#123; \"scripts\": &#123; \"prebuild\": \"echo I run before the build script\", \"build\": \"cross-env NODE_ENV=production webpack\", \"postbuild\": \"echo I run after the build script\" &#125;&#125; rebuild：重新构建。 test：测试。 start：开发阶段启动服务。 上面代码中，npm run start的默认值是node server.js，前提是项目根目录下有server.js这个脚本。 restart：重新启动。 npm restart 是一个复合命令，实际上会执行三个脚本命令：stop、restart、start。具体的执行顺序如下。 prerestart prestop stop poststop restart prestart start poststart postrestart stop：停止服务。 publish：对外发布package。 republish npm default hook npm命令的默认钩子命令。 prepublish，postpublish preinstall，postinstall preuninstall，postuninstall preversion，postversion pretest，posttest prestop，poststop prestart，poststart prerestart，postrestart 注意： prepublish这个钩子不仅会在npm publish命令之前运行，还会在npm install（不带任何参数）命令之前运行。这种行为很容易让用户感到困惑，所以 npm 4 引入了一个新的钩子prepare，行为等同于prepublish，而从 npm 5 开始，prepublish将只在npm publish命令之前运行。 npm shortcut commands四个常用的 npm 脚本有简写形式。 npm start是npm run start npm stop是npm run stop的简写 npm test是npm run test的简写 npm restart是npm run stop &amp;&amp; npm run restart &amp;&amp; npm run start的简写 npm run是npm run-script的简写。 npm config 好多内容以后在补充。 npm scripts变量 node环境中可以引用package.json和bash等变量。 变量前缀：npm_package_npm 脚本有一个非常强大的功能，就是可以使用 npm 的内部变量。 首先，通过npm_package_前缀，npm 脚本可以拿到package.json里面的字段。比如，下面是一个package.json。 12345678&gt; &#123;&gt; &quot;name&quot;: &quot;foo&quot;, &gt; &quot;version&quot;: &quot;1.2.5&quot;,&gt; &quot;scripts&quot;: &#123;&gt; &quot;view&quot;: &quot;node view.js&quot;&gt; &#125;&gt; &#125;&gt; 那么，变量npm_package_name返回foo，变量npm_package_version返回1.2.5。 1234&gt; // view.js&gt; console.log(process.env.npm_package_name); // foo&gt; console.log(process.env.npm_package_version); // 1.2.5&gt; 上面代码中，我们通过环境变量process.env对象，拿到package.json的字段值。 变量前缀：$npm_package （bash变量）如果是 Bash 脚本，可以用$npm_package_name和$npm_package_version取到这两个值。 变量：npm_config_npm 脚本还可以通过npm_config_前缀，拿到 npm 的配置变量，即npm config get xxx命令返回的值。比如，当前模块的发行标签，可以通过npm_config_tag取到。 1234// config&#123; \"view\": \"echo $npm_config_tag\"&#125; 环境变量覆盖package.json的config对象package.json里面的config对象，可以被环境变量覆盖。 12345&#123; &quot;name&quot; : &quot;foo&quot;, &quot;config&quot; : &#123; &quot;port&quot; : &quot;8080&quot; &#125;, &quot;scripts&quot; : &#123; &quot;start&quot; : &quot;node server.js&quot; &#125;&#125; 上面代码中，npm_package_config_port变量返回的是8080。这个值可以用下面的方法覆盖。 1$ npm config set foo:port 80 package.json 详情见：http://javascript.ruanyifeng.com/nodejs/packagejson.html package.lock.json npm5以后，每次npm install会自动创建package.lock.json，但是有一些潜规则。 如果package.json和package.lock.json一致，则使用package.lock.json中的配置。 如果package.json和package.lock.json不一致，则使用package.json中的配置。","tags":[{"name":"npm","slug":"npm","permalink":"https://betgar.github.io/tags/npm/"}]},{"title":"Node环境配置","date":"2018-05-31T16:00:00.000Z","path":"2018/06/01/node-env-config/","text":"Node环境配置 Node环境及配置参考 nvm for windows nvm是一个Node的版本管理模块，使用它可以随时切换Node环境。 注意: 安装 node 前保证自己电脑中的node已卸载干净 nvm安装 nvm-windows 查看当前版本 1nvm --version 查看当前已安装 node 的版本 1nvm ls 安装某版本 node， 根据 LTS 此处安装 v6.11.1 1nvm install 8.11.1 使用某版本 node 1nvm use 8.11.1 检查本地是否存在 node 1node -v nrm管理下载源 nrm 是为了解决切换 npm 源的问题，因为如果直接通过 npm 手动设置 registry 非常麻烦，并且不容易记忆，因此，才有了 nrm 的出现。npm的官方源对广大中国开发者来说较卡，因此推荐 cnpm 或者 taobao。 nrm 是为了解决切换npm 源的问题，因为如果直接通过 npm 手动设置 registry 非常麻烦，并且不容易记忆，因此，才有了nrm的出现。 npm的官方源对广大中国开发者来说较卡，因此推荐 cnpm 或者 taobao。 nrm的安装有了npm后，一切都变得非常简单，全局安装 nrm, 使用taobao源下载 1npm install -g nrm 查询当前有哪些可用源 1nrm ls 切换淘宝源 1nrm use taobao 测试源延迟毫秒数 (也与当前网络环境有关) 1nrm test python 安装 node-gyp模块需要安装python(python (v2.7 recommended, v3.x.x is not supported) python依赖.net framework 4.5 解决方式1： 12# run as Administratornpm install --global --production windows-build-tools chrome driver安装 使用淘宝源 1npm install chromedriver --chromedriver_cdnurl=http://cdn.npm.taobao.org/dist/chromedriver vue项目使用sass 如果使用vue-cli创建项目，并且使用.vue单文件，使用scss来写CSS需要安装两个依赖。 vue-cli默认没有安装node-sass和sass-loader。 安装依赖12npm install node-sass --save-devnpm install sass-loader --save-dev 配置webpack12345// webpack.base.config.js 中添加 &#123; test: /\\.scss$/, loaders: [\"style\", \"css\", \"sass\"] &#125; 参考资料Node.js简介以及环境配置","tags":[{"name":"node","slug":"node","permalink":"https://betgar.github.io/tags/node/"}]}]